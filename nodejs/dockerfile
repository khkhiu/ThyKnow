# Use Node.js v23 as the base image
FROM node:23-slim

# Set working directory
WORKDIR /app

# Verify Node.js and npm are available
RUN node --version && npm --version

# Copy package files and tsconfig first
COPY package*.json ./
COPY tsconfig*.json ./

# Copy scripts needed for build
COPY scripts/fix-html-imports.js ./scripts/
COPY scripts/copy-images.js ./scripts/

# Install dependencies 
RUN npm ci

# Copy the entire codebase
COPY . .

# Create default image directories so the build doesn't fail
RUN mkdir -p public/miniapp/images

# Build the application
RUN npm run build:backend && npm run build:frontend && node ./scripts/fix-html-imports.js && node ./scripts/copy-images.js

# Ensure the public directory is properly structured
RUN mkdir -p /app/dist/public/miniapp/dist
RUN cp -r public/* dist/public/
RUN cp -r public/miniapp/dist/* dist/public/miniapp/dist/

# Clean up dev dependencies to reduce image size
RUN npm prune --production

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Create a script to check files on startup
RUN echo '#!/bin/sh\necho "Checking directory structure..."\nls -la\necho "\nPublic directory:"\nls -la public\necho "\nDist directory:"\nls -la dist\necho "\nDist/public directory:"\nls -la dist/public\necho "\nDist/public/miniapp directory:"\nls -la dist/public/miniapp\necho "\nDist/public/miniapp/dist directory:"\nls -la dist/public/miniapp/dist\necho "\nStarting application..."\nnode dist/src/server.js' > /app/start.sh && chmod +x /app/start.sh

# Expose the application port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application with our check script
CMD ["/app/start.sh"]